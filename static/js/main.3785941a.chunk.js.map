{"version":3,"sources":["SubOrdinates.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["SubOrdinates","react_default","a","createElement","className","this","props","item","React","Component","Results","results","data","hasOwnProperty","map","i","push","SubOrdinates_SubOrdinates","key","length","id","Fragment","searchUser","start","renderSubOrdinates","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","URL","state","showResult","errorOccured","invitedUser","params","URLSearchParams","window","location","search","dataFromQueryString","get","handleSubmit","e","userName","preventDefault","input","value","alert","focus","renderHTTPCall","_this2","fetch","then","response","ok","json","Error","jsonObj","setState","catch","error","console","log","message","bind","_this3","onSubmit","type","placeholder","ref","Results_Results","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3785941a.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default class SubOrdinates extends React.Component {\n    render() {\n        return (\n            <li className=\"sub-ord\">{this.props.item}</li>\n        )\n    }\n}","import React from 'react';\nimport SubOrdinates from './SubOrdinates';\n\n\nexport default class Results extends React.Component {\n    renderSubOrdinates() {\n        let results = [];\n\n        if (this.props.data && this.props.data.data[1].hasOwnProperty('direct-subordinates')) {\n            this.props.data.data[1]['direct-subordinates'].map((item, i) => results.push(<SubOrdinates item={item} key={i} />))\n        }\n        return results;\n    }\n\n    render() {\n        let subMod = this.props.data.data.length;\n        if (subMod > 1) {\n            return (\n                <div id=\"result\" >\n                    <React.Fragment >\n                        <h2>Subordinates of \"{this.props.data.searchUser}\"</h2>\n                        <ol start=\"1\" id='subOrd'>\n                            {this.renderSubOrdinates()}\n                        </ol>\n                    </React.Fragment>\n\n                </div>\n            )\n        }else{\n            return(\n                <div id=\"result\"> He has no Subordinates </div>\n            )\n        }\n    }\n}","import React, { Component } from 'react';\nimport Results from './Results';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.URL = 'https://jsonplaceholder.typicode.com/users';\n\n    this.state = {\n      searchUser: '',\n      data: [],\n      showResult: false,\n      errorOccured: false\n    }\n\n    this.invitedUser = false;\n\n    let params = new URLSearchParams(window.location.search);\n    this.dataFromQueryString = params.get('name');\n\n    if (this.dataFromQueryString !== '' && this.dataFromQueryString) {\n      this.invitedUser = true;\n      this.handleSubmit(null);\n    }\n  }\n\n  handleSubmit(e) {\n\n    let userName;\n\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (this.input && this.input.value === '') {\n      alert('Please Enter Name ')\n      this.input.focus();\n      return false;\n    }\n\n    if (this.invitedUser) {\n      userName = this.dataFromQueryString;\n      this.invitedUser = false;\n    } else {\n      userName = this.input.value;\n    }\n\n    if (userName) {\n      this.renderHTTPCall(userName)\n\n      if (this.input) {\n        this.input.value = '';\n      }\n    }\n  }\n\n  renderHTTPCall(userName) {\n\n    fetch(this.URL + userName)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Network response was not ok.');\n      }).then((jsonObj) => {\n        if (jsonObj.length > 0) {\n          this.setState({\n            searchUser: userName,\n            data: jsonObj,\n            showResult: true,\n            errorOccured: false\n          });\n        } else {\n          this.setState({\n            searchUser: '',\n            data: [],\n            showResult: false,\n            errorOccured: false\n          });\n        }\n      }).catch(function (error) {\n        this.setState({\n          searchUser: '',\n          data: [],\n          showResult: false,\n          errorOccured: true\n        })\n        console.log('There has been a problem with your fetch operation: ', error.message);\n      }.bind(this));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>WELCOME TO SEARCH PORTAL</h1>\n        <form onSubmit={(e) => { this.handleSubmit(e) }} type=\"post\">\n          <label>\n            <input type=\"text\" className=\"search\" placeholder=\"Please Enter Employee Name\" ref={(input) => this.input = input} />\n          </label>\n          <input type=\"submit\" className=\"searchBtn\" value=\"Search\" />\n        </form>\n\n        {this.state.showResult ? <Results data={this.state} /> : null}\n\n        <div className=\"error\">{this.state.errorOccured ? 'No Record(s) Found' : null} </div>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}